{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLinks.tsx","components/PeopleTable.tsx","api.ts","stores/PeopleContext.tsx","pages/PeoplePage.tsx","pages/ErrorPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","getNewCenturies","century","includes","filter","number","type","placeholder","onChange","event","setSearchWith","target","map","length","Loader","PersonLink","person","name","slug","PeopleTable","people","slugId","useParams","sortType","order","getParentLink","parent","find","par","getSortParams","changeSort","newOrder","sort","getSortClass","born","died","motherName","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","initialState","isLoading","loadingError","filterPeople","PeopleContext","React","createContext","PeopleProvider","useState","setPeople","setIsLoading","setLoadingError","useEffect","getPeople","catch","finally","state","preparedPeople","preparedQuery","trim","toLowerCase","personCentury","Math","ceil","person1","person2","localeCompare","reverse","Provider","PeoplePage","useContext","filteredPeople","useMemo","ErrorPage","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"kQAGA,SAASA,EAAT,GAA4D,IAApCC,EAAmC,EAAnCA,SACtB,OAAOC,IAAW,cAAe,CAC/B,8BAA+BD,GAElC,CAEM,IAAME,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASA,UAAWJ,EAAcM,GAAG,IAArC,kBAEA,cAAC,IAAD,CACE,eAAa,OACbF,UAAWJ,EACXM,GAAG,SAHL,0BAWT,EC3BYC,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKH,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,GCjBYI,EAAW,kBACtB,oBAAIJ,UAAU,QAAd,sBADsB,E,8BCQjB,SAASK,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,4CC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEzB,GAAI,CACF0B,OAAQvB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC9BYM,EAAgB,WAC3B,MAAwCH,cAAxC,mBAAOC,EAAP,KAAqBG,EAArB,KACMC,EAAQJ,EAAaK,IAAI,UAAY,GACrCC,EAAMN,EAAaK,IAAI,QAAU,KACjCE,EAAYP,EAAaQ,OAAO,cAAgB,GAGtD,SAASC,EAAgBC,GACvB,OAAOH,EAAUI,SAASD,GACtBH,EAAUK,QAAO,SAAAC,GAAM,OAAIA,IAAWH,CAAf,IADpB,sBAECH,GAFD,CAEYG,GACpB,CAYD,OACE,sBAAKrC,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEwB,OAAQ,CAAES,IAAK,MACfjC,UAAWF,IAAW,CAAE,aAAcmC,IAFxC,iBAMA,cAAC,EAAD,CACET,OAAQ,CAAES,IAAK,KACfjC,UAAWF,IAAW,CAAE,YAAqB,MAARmC,IAFvC,kBAMA,cAAC,EAAD,CACET,OAAQ,CAAES,IAAK,KACfjC,UAAWF,IAAW,CAAE,YAAqB,MAARmC,IAFvC,uBAQF,qBAAKjC,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRyC,KAAK,SACLzC,UAAU,QACV0C,YAAY,SACZ3B,MAAOgB,EACPY,SArCV,SAA2BC,IAN3B,SAAuBpB,GACrB,IAAMI,EAASvB,EAAcsB,EAAcH,GAE3CM,EAAgBF,EACjB,CAGCiB,CAAc,CAAEd,MAAOa,EAAME,OAAO/B,OAAS,MAC9C,IAsCO,sBAAMf,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SA9Da,CAAC,KAAM,KAAM,KAAM,KAAM,MA+DtB+C,KAAI,SAAAV,GAAO,OACvB,cAAC,EAAD,CACEb,OAAQ,CAAEU,UAAWE,EAAgBC,IACrC,UAAQ,UACRrC,UAAWF,IAAW,cAAe,CACnC,UAAWoC,EAAUI,SAASD,KAJlC,SAQGA,GAFIA,EAPgB,MAc3B,qBAAKrC,UAAU,mBAAf,SACE,cAAC,EAAD,CACEwB,OAAQ,CAAEU,UAAW,MACrB,UAAQ,aACRlC,UAAWF,IAAW,oBAAqB,CACzC,cAAeoC,EAAUc,OAAS,IAJtC,wBAaN,qBAAKhD,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CACVwB,OAAQ,CACNS,IAAK,KACLF,MAAO,KACPG,UAAW,MALf,mCAaP,ECjHYe,G,MAAS,kBACpB,qBAAKjD,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOTkD,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpCC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,KAAMpB,EAAQkB,EAARlB,IAEpB,OACE,cAAC,IAAD,CACE/B,GAAImD,EACJrD,UAAWF,IAAW,CACpB,kBAA2B,MAARmC,IAHvB,SAMGmB,GAGN,ECZYE,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,EAAuB7B,cAAhBC,EAAP,oBACQ6B,EAAWC,cAAXD,OACFE,EAAW/B,EAAaK,IAAI,SAAW,KACvC2B,EAAQhC,EAAaK,IAAI,UAAY,KAErC4B,EAAgB,SAACR,GACrB,IAAKA,EACH,MAAO,IAGT,IAAMS,EAASN,EAAOO,MAAK,SAAAC,GAAG,OAAIA,EAAIX,OAASA,CAAjB,IAE9B,OAAIS,EAEA,cAAC,EAAD,CAAYV,OAAQU,IAIjBT,CACR,EAEKY,EAAgB,SAACC,GACrB,IAIIC,EAAW,KAWf,OATIR,IAAaO,IACfC,EAAWP,EAAQ,KAAO,QAGV,CAChBQ,KAXcT,IAAaO,GAAwB,SAAVN,EACvC,KACAM,EAUFN,MAAOO,EAIV,EAEKE,EAAe,SAACH,GACpB,OAAOnE,IAAW,MAChB,CAAE,UAAW4D,IAAaO,GAC1B,CAAE,aAAcA,GAAwB,SAAVN,GAC9B,CAAE,aAAcM,GAAwB,SAAVN,GACjC,EAED,OACE,wBACE,UAAQ,cACR3D,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAYwB,OAAQwC,EAAc,QAAlC,SACE,sBAAMhE,UAAU,OAAhB,SACE,mBAAGA,UAAWoE,EAAa,mBAMnC,6BACE,uBAAMpE,UAAU,8BAAhB,gBAEE,cAAC,EAAD,CAAYwB,OAAQwC,EAAc,OAAlC,SACE,sBAAMhE,UAAU,OAAhB,SACE,mBAAGA,UAAWoE,EAAa,kBAMnC,6BACE,uBAAMpE,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAYwB,OAAQwC,EAAc,QAAlC,SACE,sBAAMhE,UAAU,OAAhB,SACE,mBAAGA,UAAWoE,EAAa,mBAMnC,6BACE,uBAAMpE,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAYwB,OAAQwC,EAAc,QAAlC,SACE,sBAAMhE,UAAU,OAAhB,SACE,mBAAGA,UAAWoE,EAAa,mBAMnC,wCACA,6CAIJ,gCACGb,EAAOR,KAAI,SAAAI,GAAM,OAChB,qBACE,UAAQ,SAERnD,UAAWF,IAAW,CACpB,yBAA0BqD,EAAOE,OAASG,IAJ9C,UAOE,6BACE,cAAC,EAAD,CAAYL,OAAQA,MAGtB,6BAAKA,EAAOlB,MACZ,6BAAKkB,EAAOkB,OACZ,6BAAKlB,EAAOmB,OACZ,6BAAKV,EAAcT,EAAOoB,cAC1B,6BAAKX,EAAcT,EAAOqB,gBAbrBrB,EAAOE,KAHE,QAsBzB,E,cCtIKoB,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCHP,IAAMC,EAAwB,CAC5B5B,OAAQ,GACR6B,WAAW,EACXC,cAAc,EACdC,aAAc,iBAAM,EAAN,GAGHC,EAAgBC,IAAMC,cAAcN,GAMpCO,EAAkC,SAAC,GAAkB,IAAhBnE,EAAe,EAAfA,SAChD,EAA4BoE,mBAAmB,IAA/C,mBAAOpC,EAAP,KAAeqC,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOP,EAAP,KAAkBS,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAON,EAAP,KAAqBS,EAArB,KAEAC,qBAAU,WACRF,GAAa,GDhBV,WAAP,+BCkBIG,GACGjB,KAAKa,GACLK,OAAM,kBAAMH,GAAgB,EAAtB,IACNI,SAAQ,kBAAML,GAAa,EAAnB,GACZ,GAAE,IAEH,IAyDMM,EAAQ,CACZ5C,SACA6B,YACAC,eACAC,aA7DmB,SAAC,GAMI,IAAD,IALvBvD,aAKuB,MALf,GAKe,MAJvBE,WAIuB,MAJjB,GAIiB,MAHvBC,iBAGuB,MAHX,GAGW,MAFvBiC,YAEuB,MAFhB,GAEgB,MADvBR,aACuB,MADf,GACe,EACnByC,EAAc,YAAO7C,GACnB8C,EAAgBtE,EAAMuE,OAAOC,cA8CnC,OA5CIF,IACFD,EAAiBA,EAAe7D,QAAO,SAAAY,GACrC,IAAQC,EAAiCD,EAAjCC,KAAMoB,EAA2BrB,EAA3BqB,WAAYD,EAAepB,EAAfoB,WAE1B,OAAOnB,EAAKmD,cAAcjE,SAAS+D,GAA5B,OACH9B,QADG,IACHA,OADG,EACHA,EAAYgC,cAAcjE,SAAS+D,GADhC,OAEH7B,QAFG,IAEHA,OAFG,EAEHA,EAAY+B,cAAcjE,SAAS+D,EACxC,KAGCpE,IACFmE,EAAiBA,EAAe7D,QAAO,SAAAY,GAAM,OAAIA,EAAOlB,MAAQA,CAAnB,KAG3CC,EAAUc,OAAS,IACrBoD,EAAiBA,EAAe7D,QAAO,SAAAY,GACrC,IAAQkB,EAASlB,EAATkB,KACFmC,EAAgBC,KAAKC,KAAKrC,EAAO,KAEvC,OAAOnC,EAAUI,SAASkE,EAAc9F,WACzC,KAGCyD,GACFiC,EAAejC,MAAK,SAACwC,EAASC,GAC5B,OAAQzC,GACN,IAAK,OACL,IAAK,MACH,OAAOwC,EAAQxC,GAAM0C,cAAcD,EAAQzC,IAE7C,IAAK,OACL,IAAK,OACH,OAAOwC,EAAQxC,GAAQyC,EAAQzC,GAEjC,QACE,OAAO,EAEZ,IAGW,SAAVR,GACFyC,EAAeU,UAGVV,CACR,GASD,OACE,cAACb,EAAcwB,SAAf,CAAwBhG,MAAOoF,EAA/B,SACG5E,GAGN,EC/FYyF,EAAa,WACxB,MAEIC,qBAAW1B,GADbhC,EADF,EACEA,OAAQ6B,EADV,EACUA,UAAWC,EADrB,EACqBA,aAAcC,EADnC,EACmCA,aAEnC,EAAuB5D,cAAhBC,EAAP,oBACMI,EAAQJ,EAAaK,IAAI,UAAY,GACrCC,EAAMN,EAAaK,IAAI,QAAU,GACjCE,EAAYP,EAAaQ,OAAO,cAAgB,GAChDgC,EAAOxC,EAAaK,IAAI,SAAW,GACnC2B,EAAQhC,EAAaK,IAAI,UAAY,GACrCkF,EAAiBC,mBAAQ,WAC7B,OAAO7B,EAAa,CAClBvD,QAAOE,MAAKC,YAAWiC,OAAMR,SAEhC,GAAE,CAACJ,EAAQxB,EAAOG,EAAWD,EAAKkC,EAAMR,IAEzC,OACE,qCACE,oBAAI3D,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACGuD,EAAOP,OAAS,GACf,cAAC,EAAD,MAIJ,qBAAKhD,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGoF,GACC,cAAC,EAAD,IAGDC,GACC,mBAAG,UAAQ,qBAAX,mCAECD,IAAcC,IAAiB9B,EAAOP,QACvC,mBAAG,UAAQ,kBAAX,gDAKAkE,EAAelE,QACf,2FAGEkE,EAAelE,SAAWoC,GAC5B,cAAC,EAAD,CAAa7B,OAAQ2D,gBAQpC,EC/DYE,EAAY,kBACvB,oBAAIpH,UAAU,QAAd,2BADuB,ECSZqH,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUrH,GAAG,QAE1C,cAAC,IAAD,CAAOoH,KAAK,SAASC,QAAS,cAAC,EAAD,IAA9B,SACE,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,QAGjC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,cAZf,ECFpBE,qBAAWC,SAASC,eAAe,SAA2BC,OAAO,cAAC,EAAD,I","file":"static/js/main.662a5713.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nfunction getLinkClass({ isActive }: { isActive: boolean }) {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n}\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">Home</NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getLinkClass}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n  const allCenturies = ['16', '17', '18', '19', '20'];\n\n  function getNewCenturies(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(number => number !== century)\n      : [...centuries, century];\n  }\n\n  function setSearchWith(params: SearchParams) {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value || null });\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              <SearchLink\n                params={{ centuries: getNewCenturies(century) }}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                key={century}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, slug, sex } = person;\n\n  return (\n    <NavLink\n      to={slug}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </NavLink>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLinks';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const { slugId } = useParams();\n  const sortType = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const getParentLink = (name: string | null) => {\n    if (!name) {\n      return '-';\n    }\n\n    const parent = people.find(par => par.name === name);\n\n    if (parent) {\n      return (\n        <PersonLink person={parent} />\n      );\n    }\n\n    return name;\n  };\n\n  const getSortParams = (changeSort: string) => {\n    const newSort = sortType === changeSort && order === 'desc'\n      ? null\n      : changeSort;\n\n    let newOrder = null;\n\n    if (sortType === changeSort) {\n      newOrder = order ? null : 'desc';\n    }\n\n    const newParams = {\n      sort: newSort,\n      order: newOrder,\n    };\n\n    return newParams;\n  };\n\n  const getSortClass = (changeSort: string) => {\n    return classNames('fas',\n      { 'fa-sort': sortType !== changeSort },\n      { 'fa-sort-up': changeSort && order !== 'desc' },\n      { 'fa-sort-up': changeSort && order === 'desc' });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={getSortParams('name')}>\n                <span className=\"icon\">\n                  <i className={getSortClass('name')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={getSortParams('sex')}>\n                <span className=\"icon\">\n                  <i className={getSortClass('sex')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={getSortParams('born')}>\n                <span className=\"icon\">\n                  <i className={getSortClass('born')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={getSortParams('died')}>\n                <span className=\"icon\">\n                  <i className={getSortClass('died')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={classNames({\n              'has-background-warning': person.slug === slugId,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>{getParentLink(person.motherName)}</td>\n            <td>{getParentLink(person.fatherName)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Filters } from '../types/Filter';\nimport { Context } from '../types/Context';\n\nconst initialState: Context = {\n  people: [] as Person[],\n  isLoading: false,\n  loadingError: false,\n  filterPeople: () => [],\n};\n\nexport const PeopleContext = React.createContext(initialState);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleProvider: React.FC<Props> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filterPeople = ({\n    query = '',\n    sex = '',\n    centuries = [],\n    sort = '',\n    order = '',\n  }: Filters): Person[] => {\n    let preparedPeople = [...people];\n    const preparedQuery = query.trim().toLowerCase();\n\n    if (preparedQuery) {\n      preparedPeople = preparedPeople.filter(person => {\n        const { name, fatherName, motherName } = person;\n\n        return name.toLowerCase().includes(preparedQuery)\n          ? motherName?.toLowerCase().includes(preparedQuery)\n          : fatherName?.toLowerCase().includes(preparedQuery);\n      });\n    }\n\n    if (sex) {\n      preparedPeople = preparedPeople.filter(person => person.sex === sex);\n    }\n\n    if (centuries.length > 0) {\n      preparedPeople = preparedPeople.filter(person => {\n        const { born } = person;\n        const personCentury = Math.ceil(born / 100);\n\n        return centuries.includes(personCentury.toString());\n      });\n    }\n\n    if (sort) {\n      preparedPeople.sort((person1, person2) => {\n        switch (sort) {\n          case 'name':\n          case 'sex':\n            return person1[sort].localeCompare(person2[sort]);\n\n          case 'born':\n          case 'died':\n            return person1[sort] - person2[sort];\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order === 'desc') {\n      preparedPeople.reverse();\n    }\n\n    return preparedPeople;\n  };\n\n  const state = {\n    people,\n    isLoading,\n    loadingError,\n    filterPeople,\n  };\n\n  return (\n    <PeopleContext.Provider value={state}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import { useContext, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { PeopleContext } from '../stores/PeopleContext';\n\nexport const PeoplePage = () => {\n  const {\n    people, isLoading, loadingError, filterPeople,\n  } = useContext(PeopleContext);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const filteredPeople = useMemo(() => {\n    return filterPeople({\n      query, sex, centuries, sort, order,\n    });\n  }, [people, query, centuries, sex, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people.length > 0 && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {loadingError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n              {(!isLoading && !loadingError && !people.length) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!filteredPeople.length && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {(!!filteredPeople.length && !isLoading) && (\n                <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const ErrorPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter as Router, Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { ErrorPage } from './pages/ErrorPage';\nimport { PeopleProvider } from './stores/PeopleContext';\n\nexport const Root = () => (\n  <Router>\n    <PeopleProvider>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":slugId\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Route>\n      </Routes>\n    </PeopleProvider>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement).render(<Root />);\n"],"sourceRoot":""}